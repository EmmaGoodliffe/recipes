/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A recipe. For dietary restrictions covered by the recipe, a few common restrictions are enumerated via [[suitableForDiet]]. The [[keywords]] property can also be used to add more detail.
 */
export type Recipe = HowTo & {
  /**
   * The time it takes to actually cook the dish, in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
   */
  cookTime?: string;
  /**
   * The method of cooking, such as Frying, Steaming, ...
   */
  cookingMethod?: string;
  /**
   * A single ingredient used in the recipe, e.g. sugar, flour or garlic.
   */
  ingredients?: string | string[];
  nutrition?: NutritionInformation;
  /**
   * The category of the recipe—for example, appetizer, entree, etc.
   */
  recipeCategory?: string;
  /**
   * The cuisine of the recipe (for example, French or Ethiopian).
   */
  recipeCuisine?: string;
  /**
   * A single ingredient used in the recipe, e.g. sugar, flour or garlic.
   */
  recipeIngredient?: string | string[];
  /**
   * A step in making the recipe, in the form of a single item (document, video, etc.) or an ordered list with HowToStep and/or HowToSection items.
   */
  recipeInstructions?: string | Butt2;
  /**
   * The quantity produced by the recipe (for example, number of people served, number of servings, etc).
   */
  recipeYield?: string | QuantitativeValue;
  /**
   * Indicates a dietary restriction or guideline for which this recipe or menu item is suitable, e.g. diabetic, halal etc.
   */
  suitableForDiet?: RestrictedDiet | RestrictedDiet[];
  [k: string]: unknown;
};
/**
 * Instructions that explain how to achieve a result by performing a sequence of steps.
 */
export type HowTo = Butt & {
  /**
   * The estimated cost of the supply or supplies consumed when performing instructions.
   */
  estimatedCost?: string | MonetaryAmount;
  /**
   * The length of time it takes to perform instructions or a direction (not including time to prepare the supplies), in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
   */
  performTime?: string;
  /**
   * The length of time it takes to prepare the items to be used in instructions or a direction, in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
   */
  prepTime?: string;
  /**
   * A single step item (as HowToStep, text, document, video, etc.) or a HowToSection.
   */
  step?:
    | (string | Butt2 | HowToSection | HowToStep)
    | (string | Butt2 | HowToSection | HowToStep)[];
  /**
   * A single step item (as HowToStep, text, document, video, etc.) or a HowToSection (originally misnamed 'steps'; 'step' is preferred).
   */
  steps?: (string | Butt2) | (string | Butt2)[];
  /**
   * A sub-property of instrument. A supply consumed when performing instructions or a direction.
   */
  supply?: (string | HowToSupply) | (string | HowToSupply)[];
  /**
   * A sub property of instrument. An object used (but not consumed) when performing instructions or a direction.
   */
  tool?: (string | HowToTool) | (string | HowToTool)[];
  /**
   * The total time required to perform instructions or a direction (including time to prepare the supplies), in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
   */
  totalTime?: string;
  /**
   * The quantity that results by performing instructions. For example, a paper airplane, 10 personalized candles.
   */
  yield?: string | QuantitativeValue;
  [k: string]: unknown;
};
/**
 * A monetary value or range. This type can be used to describe an amount of money such as $50 USD, or a range as in describing a bank account being suitable for a balance between £1,000 and £1,000,000 GBP, or the value of a salary, etc. It is recommended to use [[PriceSpecification]] Types to describe the price of an Offer, Invoice, etc.
 */
export type MonetaryAmount = StructuredValue & {
  /**
   * The currency in which the monetary amount is expressed.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
   */
  currency?: string;
  /**
   * The upper value of some characteristic or property.
   */
  maxValue?: number;
  /**
   * The lower value of some characteristic or property.
   */
  minValue?: number;
  /**
   * The date when the item becomes valid.
   */
  validFrom?: string;
  /**
   * The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
   */
  validThrough?: string;
  /**
   * The value of the quantitative value or property value node.\n\n* For [[QuantitativeValue]] and [[MonetaryAmount]], the recommended type for values is 'Number'.\n* For [[PropertyValue]], it can be 'Text;', 'Number', 'Boolean', or 'StructuredValue'.\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
   */
  value?: boolean | number | string | StructuredValue1;
  [k: string]: unknown;
};
/**
 * Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing.
 */
export type StructuredValue = Butt1;
/**
 * Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing.
 */
export type StructuredValue1 = Butt1;
/**
 * A sub-grouping of steps in the instructions for how to achieve a result (e.g. steps for making a pie crust within a pie recipe).
 */
export type HowToSection = Butt3 &
  Butt4 &
  Butt5 & {
    /**
     * A single step item (as HowToStep, text, document, video, etc.) or a HowToSection (originally misnamed 'steps'; 'step' is preferred).
     */
    steps?: (string | Butt2) | (string | Butt2)[];
    [k: string]: unknown;
  };
/**
 * A step in the instructions for how to achieve a result. It is an ordered list with HowToDirection and/or HowToTip items.
 */
export type HowToStep = Butt6 & Butt7 & Butt8;
/**
 * A supply consumed when performing the instructions for how to achieve a result.
 */
export type HowToSupply = HowToItem & {
  /**
   * The estimated cost of the supply or supplies consumed when performing instructions.
   */
  estimatedCost?: string | MonetaryAmount;
  [k: string]: unknown;
};
/**
 * An item used as either a tool or supply when performing the instructions for how to to achieve a result.
 */
export type HowToItem = Butt9 & {
  /**
   * The required quantity of the item(s).
   */
  requiredQuantity?: number | string | QuantitativeValue;
  [k: string]: unknown;
};
/**
 * A point value or interval for product characteristics and other purposes.
 */
export type QuantitativeValue = StructuredValue2 & {
  /**
   * A property-value pair representing an additional characteristics of the entitity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.\n\nNote: Publishers should be aware that applications designed to use specific schema.org properties (e.g. https://schema.org/width, https://schema.org/color, https://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
   *
   */
  additionalProperty?: PropertyValue | PropertyValue[];
  /**
   * The upper value of some characteristic or property.
   */
  maxValue?: number;
  /**
   * The lower value of some characteristic or property.
   */
  minValue?: number;
  /**
   * The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon.
   */
  unitCode?: string;
  /**
   * A string or text indicating the unit of measurement. Useful if you cannot provide a standard unit code for
   * unitCode.
   */
  unitText?: string | string[];
  /**
   * The value of the quantitative value or property value node.\n\n* For [[QuantitativeValue]] and [[MonetaryAmount]], the recommended type for values is 'Number'.\n* For [[PropertyValue]], it can be 'Text;', 'Number', 'Boolean', or 'StructuredValue'.\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
   */
  value?: boolean | number | string | StructuredValue1;
  /**
   * A secondary value that provides additional information on the original value, e.g. a reference temperature or a type of measurement.
   */
  valueReference?:
    | (
        | string
        | DefinedTerm
        | Enumeration
        | MeasurementTypeEnumeration
        | PropertyValue
        | QualitativeValue
        | QuantitativeValue
        | StructuredValue1
      )
    | (
        | string
        | DefinedTerm
        | Enumeration
        | MeasurementTypeEnumeration
        | PropertyValue
        | QualitativeValue
        | QuantitativeValue
        | StructuredValue1
      )[];
  [k: string]: unknown;
};
/**
 * Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing.
 */
export type StructuredValue2 = Butt1;
/**
 * A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.
 *
 */
export type PropertyValue = StructuredValue3 & {
  /**
   * The upper value of some characteristic or property.
   */
  maxValue?: number;
  /**
   * A technique or technology used in a [[Dataset]] (or [[DataDownload]], [[DataCatalog]]),
   * corresponding to the method used for measuring the corresponding variable(s) (described using [[variableMeasured]]). This is oriented towards scientific and scholarly dataset publication but may have broader applicability; it is not intended as a full representation of measurement, but rather as a high level summary for dataset discovery.
   *
   * For example, if [[variableMeasured]] is: molecule concentration, [[measurementTechnique]] could be: "mass spectrometry" or "nmr spectroscopy" or "colorimetry" or "immunofluorescence".
   *
   * If the [[variableMeasured]] is "depression rating", the [[measurementTechnique]] could be "Zung Scale" or "HAM-D" or "Beck Depression Inventory".
   *
   * If there are several [[variableMeasured]] properties recorded for some given data object, use a [[PropertyValue]] for each [[variableMeasured]] and attach the corresponding [[measurementTechnique]].
   *
   */
  measurementTechnique?: string | string[];
  /**
   * The lower value of some characteristic or property.
   */
  minValue?: number;
  /**
   * A commonly used identifier for the characteristic represented by the property, e.g. a manufacturer or a standard code for a property. propertyID can be
   * (1) a prefixed string, mainly meant to be used with standards for product properties; (2) a site-specific, non-prefixed string (e.g. the primary key of the property or the vendor-specific id of the property), or (3)
   * a URL indicating the type of the property, either pointing to an external vocabulary, or a Web resource that describes the property (e.g. a glossary entry).
   * Standards bodies should promote a standard prefix for the identifiers of properties from their standards.
   */
  propertyID?: string | string[];
  /**
   * The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon.
   */
  unitCode?: string;
  /**
   * A string or text indicating the unit of measurement. Useful if you cannot provide a standard unit code for
   * unitCode.
   */
  unitText?: string | string[];
  /**
   * The value of the quantitative value or property value node.\n\n* For [[QuantitativeValue]] and [[MonetaryAmount]], the recommended type for values is 'Number'.\n* For [[PropertyValue]], it can be 'Text;', 'Number', 'Boolean', or 'StructuredValue'.\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
   */
  value?: boolean | number | string | StructuredValue1;
  /**
   * A secondary value that provides additional information on the original value, e.g. a reference temperature or a type of measurement.
   */
  valueReference?:
    | (
        | string
        | DefinedTerm
        | Enumeration
        | MeasurementTypeEnumeration
        | PropertyValue
        | QualitativeValue
        | QuantitativeValue
        | StructuredValue1
      )
    | (
        | string
        | DefinedTerm
        | Enumeration
        | MeasurementTypeEnumeration
        | PropertyValue
        | QualitativeValue
        | QuantitativeValue
        | StructuredValue1
      )[];
  [k: string]: unknown;
};
/**
 * Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing.
 */
export type StructuredValue3 = Butt1;
/**
 * A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
 */
export type DefinedTerm = Butt10 & {
  /**
   * A [[DefinedTermSet]] that contains this term.
   */
  inDefinedTermSet?: (string | DefinedTermSet) | (string | DefinedTermSet)[];
  /**
   * A code that identifies this [[DefinedTerm]] within a [[DefinedTermSet]]
   */
  termCode?: string | string[];
  [k: string]: unknown;
};
/**
 * A set of defined terms for example a set of categories or a classification scheme, a glossary, dictionary or enumeration.
 */
export type DefinedTermSet = Butt11 & {
  /**
   * A Defined Term contained in this term set.
   */
  hasDefinedTerm?: DefinedTerm | DefinedTerm[];
  [k: string]: unknown;
};
/**
 * Lists or enumerations—for example, a list of cuisines or music genres, etc.
 */
export type Enumeration = Butt12 & {
  /**
   * Relates a term (i.e. a property, class or enumeration) to one that supersedes it.
   */
  supersededBy?:
    | (Class | Enumeration | Property)
    | (Class | Enumeration | Property)[];
  [k: string]: unknown;
};
/**
 * A class, also often called a 'Type'; equivalent to rdfs:Class.
 */
export type Class = Butt13 & {
  /**
   * Relates a term (i.e. a property, class or enumeration) to one that supersedes it.
   */
  supersededBy?:
    | (Class | Enumeration | Property)
    | (Class | Enumeration | Property)[];
  [k: string]: unknown;
};
/**
 * A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
 */
export type Property = Butt14 & {
  /**
   * Relates a property to a class that is (one of) the type(s) the property is expected to be used on.
   */
  domainIncludes?: Class | Class[];
  /**
   * Relates a property to a property that is its inverse. Inverse properties relate the same pairs of items to each other, but in reversed direction. For example, the 'alumni' and 'alumniOf' properties are inverseOf each other. Some properties don't have explicit inverses; in these situations RDFa and JSON-LD syntax for reverse properties can be used.
   */
  inverseOf?: Property | Property[];
  /**
   * Relates a property to a class that constitutes (one of) the expected type(s) for values of the property.
   */
  rangeIncludes?: Class | Class[];
  /**
   * Relates a term (i.e. a property, class or enumeration) to one that supersedes it.
   */
  supersededBy?:
    | (Class | Enumeration | Property)
    | (Class | Enumeration | Property)[];
  [k: string]: unknown;
};
/**
 * A tool used (but not consumed) when performing instructions for how to achieve a result.
 */
export type HowToTool = HowToItem1;
/**
 * An item used as either a tool or supply when performing the instructions for how to to achieve a result.
 */
export type HowToItem1 = Butt9 & {
  /**
   * The required quantity of the item(s).
   */
  requiredQuantity?: number | string | QuantitativeValue;
  [k: string]: unknown;
};
/**
 * Nutrition information about the recipe or menu item.
 */
export type NutritionInformation = StructuredValue4 & {
  /**
   * The number of calories.
   */
  calories?: string;
  /**
   * The number of grams of carbohydrates.
   */
  carbohydrateContent?: string;
  /**
   * The number of milligrams of cholesterol.
   */
  cholesterolContent?: string;
  /**
   * The number of grams of fat.
   */
  fatContent?: string;
  /**
   * The number of grams of fiber.
   */
  fiberContent?: string;
  /**
   * The number of grams of protein.
   */
  proteinContent?: string;
  /**
   * The number of grams of saturated fat.
   */
  saturatedFatContent?: string;
  /**
   * The serving size, in terms of the number of volume or mass.
   */
  servingSize?: string;
  /**
   * The number of milligrams of sodium.
   */
  sodiumContent?: string;
  /**
   * The number of grams of sugar.
   */
  sugarContent?: string;
  /**
   * The number of grams of trans fat.
   */
  transFatContent?: string;
  /**
   * The number of grams of unsaturated fat.
   */
  unsaturatedFatContent?: string;
  [k: string]: unknown;
};
/**
 * Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing.
 */
export type StructuredValue4 = Butt1;
/**
 * A diet restricted to certain foods or preparations for cultural, religious, health or lifestyle reasons.
 */
export type RestrictedDiet = RestrictedDiet1 & RestrictedDiet2;
export type RestrictedDiet1 =
  | "DiabeticDiet"
  | "GlutenFreeDiet"
  | "HalalDiet"
  | "HinduDiet"
  | "KosherDiet"
  | "LowCalorieDiet"
  | "LowFatDiet"
  | "LowLactoseDiet"
  | "LowSaltDiet"
  | "VeganDiet"
  | "VegetarianDiet";
export type RestrictedDiet2 = string;

/**
 * The most generic kind of creative work, including books, movies, photographs, software programs, etc.
 */
export interface Butt {
  foo?: string;
  [k: string]: unknown;
}
/**
 * A utility class that serves as the umbrella for a number of 'intangible' things such as quantities, structured values, etc.
 */
export interface Butt1 {
  foo?: string;
  [k: string]: unknown;
}
export interface Butt2 {
  foo?: string;
  [k: string]: unknown;
}
/**
 * The most generic kind of creative work, including books, movies, photographs, software programs, etc.
 */
export interface Butt3 {
  foo?: string;
  [k: string]: unknown;
}
/**
 * A list of items of any sort—for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
 */
export interface Butt4 {
  foo?: string;
  [k: string]: unknown;
}
/**
 * An list item, e.g. a step in a checklist or how-to description.
 */
export interface Butt5 {
  foo?: string;
  [k: string]: unknown;
}
/**
 * The most generic kind of creative work, including books, movies, photographs, software programs, etc.
 */
export interface Butt6 {
  foo?: string;
  [k: string]: unknown;
}
/**
 * A list of items of any sort—for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
 */
export interface Butt7 {
  foo?: string;
  [k: string]: unknown;
}
/**
 * An list item, e.g. a step in a checklist or how-to description.
 */
export interface Butt8 {
  foo?: string;
  [k: string]: unknown;
}
/**
 * An list item, e.g. a step in a checklist or how-to description.
 */
export interface Butt9 {
  foo?: string;
  [k: string]: unknown;
}
/**
 * A utility class that serves as the umbrella for a number of 'intangible' things such as quantities, structured values, etc.
 */
export interface Butt10 {
  foo?: string;
  [k: string]: unknown;
}
/**
 * The most generic kind of creative work, including books, movies, photographs, software programs, etc.
 */
export interface Butt11 {
  foo?: string;
  [k: string]: unknown;
}
/**
 * A utility class that serves as the umbrella for a number of 'intangible' things such as quantities, structured values, etc.
 */
export interface Butt12 {
  foo?: string;
  [k: string]: unknown;
}
/**
 * A utility class that serves as the umbrella for a number of 'intangible' things such as quantities, structured values, etc.
 */
export interface Butt13 {
  foo?: string;
  [k: string]: unknown;
}
/**
 * A utility class that serves as the umbrella for a number of 'intangible' things such as quantities, structured values, etc.
 */
export interface Butt14 {
  foo?: string;
  [k: string]: unknown;
}
/**
 * Enumeration of common measurement types (or dimensions), for example "chest" for a person, "inseam" for pants, "gauge" for screws, or "wheel" for bicycles.
 */
export interface MeasurementTypeEnumeration {
  [k: string]: unknown;
}
/**
 * A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
 */
export interface QualitativeValue {
  /**
   * A property-value pair representing an additional characteristics of the entitity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.\n\nNote: Publishers should be aware that applications designed to use specific schema.org properties (e.g. https://schema.org/width, https://schema.org/color, https://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
   *
   */
  additionalProperty?: PropertyValue | PropertyValue[];
  /**
   * This ordering relation for qualitative values indicates that the subject is equal to the object.
   */
  equal?: QualitativeValue | QualitativeValue[];
  /**
   * This ordering relation for qualitative values indicates that the subject is greater than the object.
   */
  greater?: QualitativeValue | QualitativeValue[];
  /**
   * This ordering relation for qualitative values indicates that the subject is greater than or equal to the object.
   */
  greaterOrEqual?: QualitativeValue | QualitativeValue[];
  /**
   * This ordering relation for qualitative values indicates that the subject is lesser than the object.
   */
  lesser?: QualitativeValue | QualitativeValue[];
  /**
   * This ordering relation for qualitative values indicates that the subject is lesser than or equal to the object.
   */
  lesserOrEqual?: QualitativeValue | QualitativeValue[];
  /**
   * This ordering relation for qualitative values indicates that the subject is not equal to the object.
   */
  nonEqual?: QualitativeValue | QualitativeValue[];
  /**
   * A secondary value that provides additional information on the original value, e.g. a reference temperature or a type of measurement.
   */
  valueReference?:
    | (
        | string
        | DefinedTerm
        | Enumeration
        | MeasurementTypeEnumeration
        | PropertyValue
        | QualitativeValue
        | QuantitativeValue
        | StructuredValue1
      )
    | (
        | string
        | DefinedTerm
        | Enumeration
        | MeasurementTypeEnumeration
        | PropertyValue
        | QualitativeValue
        | QuantitativeValue
        | StructuredValue1
      )[];
  [k: string]: unknown;
}
